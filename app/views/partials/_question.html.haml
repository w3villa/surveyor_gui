-# TODO: js for slider
- rg ||= nil
- renderer = q.renderer(g ||= nil)
- disabled = defined?(disableFlag) ? disableFlag : false
- unless q.display_type == "hidden"
  = f.inputs q_text(q, @render_context, I18n.locale), :id => rg ? "q_#{q.id}_#{rg}" : "q_#{q.id}", :class => "q_#{renderer} #{q.css_class(@response_set)}" do
    %span.help= q.help_text_for(@render_context, I18n.locale)
    - case renderer
    - when  :image, :label, :default_label, :inline_label, :repeater_label
    - when :dropdown, :inline_dropdown, :default_dropdown, :slider, :repeater_dropdown, :stars
      - r = response_for(@response_set, q, nil, rg)
      - i = response_idx
      = f.semantic_fields_for i, r do |ff|
        = ff.input :question_id, :as => :quiet
        = ff.input :response_group, :as => :quiet, :input_html => { :value => rg } if g && g.display_type == "repeater"
        = ff.input :api_id, :as => :quiet
        -# the next three lines add for sureyor_gui
        - if renderer==:stars
          - if !params[:rm_id].present?
            = ff.input :float_value, :as => :radio, :collection => [[nil,1],[nil,2],[nil,3],[nil,4],[nil,5]], :include_blank => (renderer != :slider), :input_html => { :disabled => disabled }, wrapper_html: { class: 'star-container' }
            = ff.hidden_field :answer_id, value: q.answers.first.id, :as => :quiet
            = ff.hidden_field :response_other, class: "dynamic_source", id: current_user.id, value: @response_set.id
            = ff.text_area :text_value, class: "question-text-area", placeholder: "Remarks"
          - if params[:profile_id].present?
            %label.employee-response-label (By Employee)
            %div{id: "user_response_for_rm_#{ff.object.question_id}"}
              - if params[:rm_id].present?
                - survey_action = SurveyAction.where(action_by_id: params[:profile_id], action_for_id: params[:rm_id], survey_id: ff.object.response_set.survey_id).last
                - response_set_id = survey_action&.response_set_id
              - else
                - survey_action = SurveyAction.where(action_by_id: params[:profile_id], action_for_id: current_user.current_profile.id, survey_id: ff.object.response_set.survey_id).last
                - response_set_id = survey_action&.response_set_id
              %div{id: "rm_response_user", data: {profile_id: params[:profile_id], response_set_id: response_set_id}}
                = ff.input :integer_value, :as => :radio, :collection => [[nil,1],[nil,2],[nil,3],[nil,4],[nil,5]], :include_blank => (renderer != :slider), :input_html => { :disabled => disabled }, wrapper_html: { class: 'star-container rm_present' }
                - if !params[:rm_id].present?
                  %label.remarks-label Remarks
                = text_area_tag 'custom_rating_text_input', ResponseSet.where(user_id: params["profile_id"], survey_id: params["survey_id"])&.first&.responses&.where(question_id: ff.object.question_id)&.first&.text_value, class: 'custom_text_rating_input', readonly: true
          - if params[:rm_id].present?
            %div{id: "rm-id#{params[:rm_id]}", class: "rm-response_#{ff.object.question_id}", data_src: "re-response_id#{ff.object.response_set_id}"}
            - survey_action = SurveyAction.where(action_by_id: params[:rm_id], action_for_id: params[:profile_id], survey_id: ff.object.response_set.survey_id).last
            - response_set_id = survey_action&.response_set_id
            %div{id: "rm-id#{params[:rm_id]}", class: "rm-response_#{ff.object.question_id}", data_src: "re-response_id#{response_set_id}"}
            %label.employee-response-label (By Reporting Manager)
            %div{id: "rm-response"}
              = ff.input :integer_value, :as => :radio, :collection => [[nil,1],[nil,2],[nil,3],[nil,4],[nil,5]], :include_blank => (renderer != :slider), :input_html => { :disabled => disabled }, wrapper_html: { class: 'star-container' }
              - response_set_id = SurveyAction.where(action_by_id: params[:rm_id], action_for_id: params[:profile_id],survey_id: params[:survey_id])&.last&.response_set_id
              - response_set = ResponseSet.find(response_set_id) if response_set_id.present?
              = text_area_tag 'custom_rating_text_input', response_set&.responses&.where(question_id: ff.object.question_id)&.last&.text_value, class: 'custom_text_rating_input', readonly: true
              = ff.hidden_field :response_other, class: "dynamic_source", value: response_set_id
        - else
          = ff.input :answer_id, :as => :select, :collection => q.answers.map{|a| [a.text, a.id]}, :include_blank => (renderer != :slider),  :input_html => { :disabled => disabled }
    - else # :default, :inline, :inline_default
      - if q.pick == "one"
        - r = response_for(@response_set, q, nil, rg)
        - i = response_idx  # increment the response index since the answer partial skips for q.pick == one
        = f.semantic_fields_for i, r do |ff|
          = ff.input :question_id, :as => :quiet
          = ff.input :response_group, :as => :quiet, :value => rg if g && g.display_type == "repeater"
          = ff.input :api_id, :as => :quiet
      - q.answers.each do |a|
        - next if (q.pick == "one" or q.pick == "any") and disabled and @response_set.responses.where( :question_id => q.id, :answer_id => a.id).empty?
        = render a.custom_renderer || '/partials/answer', :q => q, :a => a, :f => f, :rg => rg, :g => g, :disableFlag => disabled
:css
  #surveyor fieldset {
    border: none;
    margin: 0 0 !important;
    padding: 0 0  !important;
  }
  #surveyor p {
    word-wrap: break-word;
  }